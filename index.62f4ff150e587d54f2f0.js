(()=>{"use strict";var t,e,l,a;!function(t){t.red="svg-lamp-red",t.blue="svg-lamp-blue",t.yellow="svg-lamp-yellow"}(t||(t={})),function(t){t["turnОn"]="active",t.sway="swaying",t.current="light"}(e||(e={})),function(t){t.check="check",t.current="active",t.help="help"}(l||(l={})),function(t){t.win="win",t.fail="fail",t.help="help"}(a||(a={}));const s=function(t,...e){const l=document.createElement(t);return e.forEach((t=>{l.classList.add(t)})),l};class i{constructor(t,e=0){if(this.data=t,this.titleBox=document.getElementById("task-desctiption"),!this.titleBox)throw new Error("#task-desctiption is not found");if(this.rows=t[e].layoutRows,this.box=document.getElementById("task-box"),!this.box)throw new Error("#task-box is not found");if(this.helpBTN=document.getElementById("task-help"),!this.helpBTN)throw new Error("#task-help is not found");this.addTitle(t[e].order),this.clear(),this.create(),i.illuminate()}draw(t){this.rows=this.data[t].layoutRows,this.addTitle(this.data[t].order),this.clear(),this.create(),i.illuminate()}create(){this.rows.forEach(((t,e)=>{const l=s("div","line");l.setAttribute("rs-illuminator",`L${e}`),l.setAttribute("teg-behold",t.line.join(" ")),t.lamps.forEach(((t,a)=>{const o=s("div","lamp");null!==t.lampStatus&&o.classList.add(t.lampStatus),o.setAttribute("rs-illuminator",`L${e}L${a}`),o.setAttribute("teg-behold",t.title),o.innerHTML=i.createLamp(t.color),l.append(o)})),this.box.append(l)}))}clear(){this.box.innerHTML=""}addTitle(t){this.titleBox.textContent=t}static createLamp(t){return`<svg class="${t}" width="158" height="154" viewBox="0 0 158 154" fill="none" xmlns="http://www.w3.org/2000/svg">\n      <g class="lamp_light" filter="url(#filter_light)">\n        <ellipse cx="79" cy="84.5" rx="56" ry="46.5" fill="#FE7044" fill-opacity="0.66" />\n      </g>\n      <g class="lamp-body">\n        <path class="lamp-body_pomp" d="M75.231 29.431C72.011 29.275 69.208 31.485 68.648 34.575C66.53 45.635 60.562 55.962 53.779 64.907C50.144 69.672 47.903 75.635 47.499 82.122C46.581 98.632 59.067 113.262 75.491 114.896C93.213 116.656 108.777 103.359 109.911 85.73C110.361 79.332 108.754 73.305 105.813 68.182C100.248 58.559 95.433 47.322 94.733 36.235C94.487 33.105 92.055 30.528 88.923 30.325L75.233 29.433L75.231 29.431Z" fill="url(#paint_radial_red)" />\n        <path d="M79.413 4.69301L88.675 5.25701C95.297 5.70501 100.299 11.351 99.851 17.973L98.967 32.782C98.8502 34.3407 98.1295 35.7922 96.9584 36.8274C95.7873 37.8625 94.2582 38.3995 92.697 38.324L71.267 36.992C69.7084 36.8755 68.2569 36.155 67.2217 34.984C66.1865 33.813 65.6495 32.2841 65.725 30.723L66.609 15.914C67.057 9.29201 72.791 4.24501 79.413 4.69301Z" fill="url(#paint_linear_cap)" />\n        <path class="lamp_selected" d="M65.7233 36.3087C65.8529 36.4553 65.9874 36.5966 66.1264 36.7324C63.7223 46.421 58.3497 55.569 52.1872 63.6961C48.3053 68.7857 45.9306 75.1295 45.5029 81.9977L45.5028 81.9977L45.5021 82.011C44.5249 99.5852 57.7989 115.146 75.293 116.886L75.2934 116.886C94.1412 118.758 110.697 104.618 111.906 85.8647C112.385 79.04 110.668 72.6227 107.548 67.1862L107.544 67.1807C102.58 58.5961 98.315 48.8649 97.0362 39.23C97.4769 38.9712 97.8946 38.6691 98.2829 38.3259C99.8447 36.9455 100.806 35.0099 100.961 32.9314L100.963 32.9012L101.847 18.0999C102.366 10.3628 96.5148 3.78282 88.81 3.26157L88.81 3.26153L88.7966 3.26071L79.548 2.69757C79.5457 2.69741 79.5434 2.69726 79.541 2.6971C71.8108 2.17794 65.1354 8.06641 64.6136 15.779L64.6126 15.7948L63.7286 30.6038L63.7273 30.6264C63.6266 32.7082 64.3428 34.7471 65.7233 36.3087Z" stroke="white" stroke-width="4" stroke-linejoin="round" />\n      </g>\n      <defs>\n        <filter id="filter_light" x="0" y="15" width="158" height="139" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">\n          <feFlood flood-opacity="0" result="BackgroundImageFix" />\n          <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape" />\n          <feGaussianBlur stdDeviation="11.5" result="effect1_foregroundBlur_8_30" />\n        </filter>\n        <radialGradient id="paint_radial_red" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(79.453 60.1533) rotate(-175.352) scale(37.4467 48.1474)">\n          <stop stop-color="#FF925C" /> <stop offset="1" stop-color="#FF3100" />\n        </radialGradient>\n        <radialGradient id="paint_radial_yellow" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(79.453 60.1533) rotate(-175.352) scale(37.4467 48.1474)">\n          <stop stop-color="#FFD15C" /> <stop offset="1" stop-color="#FAFF00" />\n        </radialGradient>\n        <radialGradient id="paint_radial_blue" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(79.453 60.1533) rotate(-175.352) scale(37.4467 48.1474)">\n          <stop stop-color="#5CFFF5" /> <stop offset="1" stop-color="#1FAEDB" />\n        </radialGradient>\n        <linearGradient id="paint_linear_cap" x1="99.637" y1="22.3527" x2="66.3912" y2="20.2555"\n          gradientUnits="userSpaceOnUse"> <stop stop-color="#001F1C" /> \n          <stop offset="0.0459572" stop-color="#002C26" /> <stop offset="0.1178" stop-color="#003730" />\n          <stop offset="0.219" stop-color="#003E35" /> <stop offset="0.5" stop-color="#004037" /> \n          <stop offset="0.781" stop-color="#003E35" /> <stop offset="0.8822" stop-color="#003730" /> \n          <stop offset="0.954" stop-color="#002C26" /> <stop offset="1" stop-color="#001F1C" />\n        </linearGradient>\n      </defs>\n      </svg>`}static illuminate(){document.querySelectorAll(".lamp").forEach((t=>{const e=t.parentElement;t.addEventListener("mouseover",(()=>{const l=t.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${l}]`).forEach((t=>t.classList.add("light"))),e.style.borderTop="#d9a209 dotted 10px;"})),t.addEventListener("mouseout",(()=>{const l=t.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${l}]`).forEach((t=>t.classList.remove("light"))),e.style.borderTop=""}))})),document.querySelectorAll(".line").forEach((t=>{t.addEventListener("mouseover",(t=>{const e=t.target.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${e}]`).forEach((t=>t.classList.add("light")))})),t.addEventListener("mouseout",(t=>{const e=t.target.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${e}]`).forEach((t=>t.classList.remove("light")))}))}))}swichOnIlluminate(){this.box.querySelectorAll(`.lamp.${e.sway}`).forEach((t=>{t.classList.remove(`${e.sway}`),t.classList.add(`${e.turnОn}`)}))}}const o=i;class r{constructor(t,e=0){if(this.data=t,this.rows=t[e].layoutRows,this.box=document.getElementById("tegs-box"),!this.box)throw new Error("#tegs-box is not found");this.clear(),this.create(),r.illuminate()}draw(t){this.rows=this.data[t].layoutRows,this.clear(),this.create(),r.illuminate()}create(){this.rows.forEach(((t,e)=>{const[l,a]=t.line,i=s("div","tegs__el");i.setAttribute("rs-illuminator",`L${e}`),i.textContent=l,this.box.append(i),t.lamps.forEach(((t,l)=>{const a=s("div","tegs__el");a.setAttribute("rs-illuminator",`L${e}L${l}`),a.textContent=t.htmlEditorData,this.box.append(a)}));const o=s("div","tegs__el");o.setAttribute("rs-illuminator",`L${e}`),o.textContent=a,this.box.append(o)}))}clear(){this.box.innerHTML=""}static illuminate(){document.querySelectorAll(".tegs__el").forEach((t=>{t.addEventListener("mouseover",(t=>{const e=t.target.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${e}]`).forEach((t=>t.classList.add("light")))})),t.addEventListener("mouseout",(t=>{const e=t.target.getAttribute("rs-illuminator");document.querySelectorAll(`[rs-illuminator=${e}]`).forEach((t=>t.classList.remove("light")))}))}))}}const n=r;new class{constructor(t){this.data=t,this.defaultProgressGame={currentLevel:0,checkedLevels:[],helpedLevels:[]};const e=JSON.parse(`${localStorage.getItem("saveData")}`);this.currentLevel=(null==e?void 0:e.currentLevel)||this.defaultProgressGame.currentLevel,this.checkedLevels=(null==e?void 0:e.checkedLevels)||this.defaultProgressGame.checkedLevels,this.helpedLevels=(null==e?void 0:e.helpedLevels)||this.defaultProgressGame.helpedLevels,this.levelBox=new class{constructor(t,e=0){if(this.data=t,this.box=document.getElementById("levels"),!this.box)throw new Error("#levels__box is not found");this.resetBTN=document.getElementById("reset"),this.elements=this.box.children,this.currentLevel=e,this.clear(),this.draw()}draw(){this.data.forEach(((t,e)=>{const a=s("li","level");e===this.currentLevel&&a.classList.add(l.current),a.append(s("span","checkmark"));const i=s("span","level__num");i.textContent=`${e+1}. `,a.append(i);const o=s("span","level__name");o.textContent=t.name,a.append(o),this.box.append(a)}))}clear(){this.box.innerHTML=""}switchLevel(t,e){return this.elements[t].classList.remove(l.current),this.elements[e].classList.add(l.current),e}showStatus(t,e){Array.from(this.elements).forEach(((l,a)=>{t.includes(a)?l.classList.add(e):l.classList.remove(e)}))}}(t,this.currentLevel),this.levelBox.showStatus(this.checkedLevels,l.check),this.levelBox.showStatus(this.helpedLevels,l.help),this.cssEdinor=new class{constructor(t){if(this.data=t,this.enterBTN=document.getElementById("enter-css"),!this.enterBTN)throw new Error("#enter-css is not found");if(this.input=document.getElementById("input-css"),!this.input)throw new Error("#input-css is not found");if("INPUT"!==this.input.tagName)throw new Error("#input-css is not input")}checkInput(t){const{validSelectors:e}=this.data[t],l=this.getInput();return e.includes(l)}getInput(){return this.input.value.replace(/\s+/g," ").trim()}getValidInput(t){return this.data[t].validSelectors[0]}clearInput(){this.input.value=""}typeWriter(t,e){return l=this,a=void 0,i=function*(){const l=this.input;function a(t){return new Promise((a=>{setTimeout((()=>{l.value+=t,a()}),e)}))}l.value="";const s=t.split("");for(let t=0;t<s.length;t+=1)yield a(s[t])},new((s=void 0)||(s=Promise))((function(t,e){function o(t){try{n(i.next(t))}catch(t){e(t)}}function r(t){try{n(i.throw(t))}catch(t){e(t)}}function n(e){var l;e.done?t(e.value):(l=e.value,l instanceof s?l:new s((function(t){t(l)}))).then(o,r)}n((i=i.apply(l,a||[])).next())}));var l,a,s,i}}(t),this.layout=new o(t,this.currentLevel),this.htmlEditor=new n(t,this.currentLevel),this.isGameOver=()=>this.checkedLevels.length===this.data.length}inite(){this.openLevel(this.currentLevel),this.clickLevel(),this.reset(),this.clickEnter(),this.clickHelp(),this.saveGame(),this.isGameOver()&&this.finishedGame()}clickLevel(){this.levelBox.box.addEventListener("click",(t=>{const e=Array.from(this.levelBox.elements).indexOf(t.target);e>=0&&this.openLevel(e)}))}openLevel(t){t<this.levelBox.elements.length&&t>=0?(this.layout.draw(t),this.htmlEditor.draw(t),this.currentLevel=this.levelBox.switchLevel(this.currentLevel,t)):t<0?this.openLevel(0):this.openLevel(this.levelBox.elements.length-1),this.cssEdinor.clearInput()}reset(){var t;null===(t=this.levelBox.resetBTN)||void 0===t||t.addEventListener("click",(()=>{this.checkedLevels=this.defaultProgressGame.checkedLevels,this.helpedLevels=this.defaultProgressGame.helpedLevels,this.levelBox.showStatus(this.checkedLevels,l.check),this.layout.titleBox.style.color="",this.levelBox.box.classList.remove("unactive"),this.openLevel(this.defaultProgressGame.currentLevel)}))}setCheckedLevels(t){this.checkedLevels.includes(t)||this.checkedLevels.push(t),this.levelBox.showStatus(this.checkedLevels,l.check)}setHelpedLevels(t){this.helpedLevels.includes(t)||this.helpedLevels.push(t),this.levelBox.showStatus(this.checkedLevels,l.check),this.levelBox.showStatus(this.helpedLevels,l.help)}clickEnter(){this.cssEdinor.enterBTN.addEventListener("click",(()=>{this.cssEdinor.checkInput(this.currentLevel)?this.showCheckInputResult(a.win):this.showCheckInputResult(a.fail)})),document.addEventListener("keyup",(t=>{if(document.activeElement===this.cssEdinor.input&&"Enter"===t.code){const t=new Event("click");this.cssEdinor.enterBTN.dispatchEvent(t),this.cssEdinor.enterBTN.style.animation="click 500ms ease",setTimeout((()=>{this.cssEdinor.enterBTN.style.animation=""}),550)}}))}showCheckInputResult(t){t===a.win||t===a.help?(this.layout.swichOnIlluminate(),this.setCheckedLevels(this.currentLevel),t===a.help&&this.setHelpedLevels(this.currentLevel),this.isGameOver()?this.finishedGame():setTimeout((()=>{this.openLevel(this.currentLevel+1)}),1e3)):t===a.fail&&document.querySelectorAll(".editor").forEach((t=>{if(t&&t instanceof HTMLElement){const e=t.style;e.animation="tremb 0.04s linear infinite alternate",setTimeout((()=>{e.animation=""}),400)}}))}clickHelp(){this.cssEdinor.clearInput(),this.layout.helpBTN.addEventListener("click",(()=>{this.layout.helpBTN.style.pointerEvents="none",this.cssEdinor.typeWriter(this.cssEdinor.getValidInput(this.currentLevel),200).then((()=>this.showCheckInputResult(a.help))).then((()=>{this.layout.helpBTN.style.pointerEvents="auto"}))}))}saveGame(){window.addEventListener("beforeunload",(()=>{const t={currentLevel:this.currentLevel,checkedLevels:this.checkedLevels,helpedLevels:this.helpedLevels};localStorage.setItem("saveData",JSON.stringify(t))}))}finishedGame(){0===this.helpedLevels.length?this.layout.addTitle("Congratulations! You have passed all levels."):this.layout.addTitle("You passed all the levels, but there are those levels that are passed with the help. Press reset to start over."),this.layout.titleBox.style.color="#ff5500",this.levelBox.box.classList.add("unactive")}}([{name:"Type Selector",order:"Select the lamp",layoutRows:[{line:['<div class="line">',"</div>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]}],validSelectors:["lamp"]},{name:"ID Selector",order:"Select the yellow lamp",layoutRows:[{line:['<div class="line">',"</div>"],lamps:[{color:t.red,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.yellow,lampStatus:e.sway,htmlEditorData:'  <lamp id="yellow">',title:'<lamp id="yellow"> </lamp>'},{color:t.red,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]}],validSelectors:["#yellow"]},{name:"Class Selector",order:"Select all red lamps",layoutRows:[{line:['<div class="line">',"</div>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:'  <lamp class="red"/>',title:'<lamp class="red"> </lamp>'},{color:t.yellow,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]},{line:['<div class="line">',"</div>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:'  <lamp class="red"/>',title:'<lamp class="red"> </lamp>'},{color:t.yellow,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]}],validSelectors:[".red","lamp.red"]},{name:"Descendant Selector",order:"Select all lamps in the first line",layoutRows:[{line:["<line1>","</line1>"],lamps:[{color:t.yellow,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp>",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]},{line:["<line2>","</line2>"],lamps:[{color:t.red,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.yellow,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]}],validSelectors:["line1 lamp"]},{name:"Universal Selector",order:"Select all lamps on the lines. Use universal Selector.",layoutRows:[{line:["<line>","</line>"],lamps:[{color:t.yellow,lampStatus:e.sway,htmlEditorData:"  <yellow />",title:"<yellow> </yellow>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red>",title:"<red> </red>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]},{line:["<line>","</line>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.yellow,lampStatus:e.sway,htmlEditorData:"  <yellow />",title:"<yellow> </yellow>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]}],validSelectors:["line *"]},{name:"Adjacent Sibling Selector",order:"Select every the blue lamps next to the red lamp.",layoutRows:[{line:["<line>","</line>"],lamps:[{color:t.blue,lampStatus:null,htmlEditorData:"  <blue />",title:"<blue> </blue>"},{color:t.red,lampStatus:null,htmlEditorData:"  <red>",title:"<red> </red>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]},{line:["<line>","</line>"],lamps:[{color:t.red,lampStatus:null,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]}],validSelectors:["red + blue"]},{name:"General Sibling Selector",order:"Select all the blue lamps that follows the red lamp.",layoutRows:[{line:["<line>","</line>"],lamps:[{color:t.blue,lampStatus:null,htmlEditorData:"  <blue />",title:"<blue> </blue>"},{color:t.red,lampStatus:null,htmlEditorData:"  <red>",title:"<red> </red>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]},{line:["<line>","</line>"],lamps:[{color:t.red,lampStatus:null,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]}],validSelectors:["red ~ blue"]},{name:"Child Selector",order:"Select all the red lamps. Use child selector",layoutRows:[{line:["<line>","</line>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red>",title:"<red> </red>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <blue />",title:"<blue> </blue>"}]},{line:["<line>","</line>"],lamps:[{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red />",title:"<red> </red>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <blue />",title:"<blue> </blue>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <red />",title:"<red> </red>"}]}],validSelectors:["line > red"]},{name:"Nth Child Pseudo-selector",order:"Select only the third red lamp.",layoutRows:[{line:["<line>","</line>"],lamps:[{color:t.yellow,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.yellow,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:null,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]}],validSelectors:["red:nth-child(3)"]},{name:"Empty Selector",order:"Select a non-empty line. Use empty selector",layoutRows:[{line:["<line>","</line>"],lamps:[]},{line:["<line>","</line>"],lamps:[{color:t.yellow,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.red,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.yellow,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"},{color:t.blue,lampStatus:e.sway,htmlEditorData:"  <lamp />",title:"<lamp> </lamp>"}]},{line:["<line>","</line>"],lamps:[]}],validSelectors:["line:not(:empty)"]}]).inite()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,